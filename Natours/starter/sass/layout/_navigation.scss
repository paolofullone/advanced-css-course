.navigation {

  &__checkbox {
    display: none;
  }
  
  &__button {
    height: 7rem;
    width: 7rem;
    position: fixed;
    background-color: $color-white;
    top: 6rem;
    right: 6rem;
    border-radius: 50%;
    z-index: 2000;
    box-shadow: 0 1rem 3rem rgba($color-black, .1);
        // para centralizar os 3 --- do menu
    text-align: center;
    cursor: pointer;
  }

  &__background {
    height: 6rem;
    width: 6rem;
    border-radius: 50%;
    position: fixed;
    top: 6.5rem;
    right: 6.5rem;
    background-image: radial-gradient($color-primary-light, $color-primary-dark);
    z-index: 1000;
    // no cubic-bezier.com dá pra escolher o efeito e customizar
    // easings.net para escolher o efeito de transição
    transition: transform .8s cubic-bezier(0.86, 0, 0.07, 1);

    // transform: scale(80); // estava aqui só para vermos enquanto escrevemos o código...
  }

  &__nav {
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1500;

    // para esconder o menu, usamos opacity 0, mas como são links, também precisamos passar o width 0. Vamos mudar essas propriedades com o "hack" do checkbox.
    opacity: 0;
    width: 0;
    transition: all .8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }


&__list {
  @include center-horizontally-vertically;
  text-align: center;
  list-style: none;
  width: 100%;
}

&__item {
  margin: 1rem;
}

&__link {
  &:link,
  &:visited {
    // ao final do vídeo percebeu que o padding não estava sendo aplicado corretamente nem o translateX do hover e active, aí lembrou de passar o inline-block aqui no link.
    display: inline-block;
    font-size: 3rem;
    font-weight: 300;
    padding: 1rem 2rem;
    color: $color-white;
    text-decoration: none;
    text-transform: uppercase;
    background-image: linear-gradient(120deg, transparent 0%, transparent 50%, $color-white 50%);
    background-size: 260%;
    transition: all .4s;

    span {
      margin-right: 1rem;
      display: inline-block;
    }
  }

  &:hover,
  &:active {
    background-position: 100%;
    color: $color-primary;
    transform: translateX(1rem);
  }
}

// FUNCTIONALITY
&__checkbox:checked ~  &__background {
  transform: scale(80);
}; 

&__checkbox:checked ~ nav {
  opacity: 1;
  width: 100%;
}

// ICON é um elemento span no html com nbsp que é vazio. E aqui vamos preencher com uma linha de 2pixels de altura e 3 rem de comprimento, para não repetir3x o mesmo elemento, usou as pseudo classes & (o proprio elemento) adicionando before e after.
&__icon {
  position: relative;
  margin-top: 3.5rem;
  &,
  &::before,
  &::after {
    width: 3rem;
    height: 2px;
    background-color: $color-grey-dark-3;
    display: inline-block;
  }

  // para que as pseudo-classes before e after apareçam na tela, elas precisam ter o content definido, mesmo que seja uma string vazia.
  &::before,
  &::after{
    content: "";
    position: absolute;
    left: 0;
    transition: all .4s;
  }

  // se colocar um transform-origin: right no &::before abaixo e comentar o top:0 nos checkboxes mais abaixo, percebemos que o elemento passa a rotacionar tomando o seu lado direito como referência. Pode ser um recurso útil também. Se não for espeficicado ele vai torationar a partir do centro.

  //   &::before {
  //   top: -.8rem;
  //   transform-origin: right;
  // }

  &::before {
    top: -.8rem;
  }

  &::after {
    bottom: -.8rem;
  }
}
  &__button:hover &__icon::before {
    top: -1rem;
  }

    &__button:hover &__icon::after {
    bottom: -1rem;
  }

  &__checkbox:checked + &__button &__icon {
    background-color: transparent;
  }


// esta parte forma o X do menu, com 45 e -45 funciona também, mas se usar 135 e -135 dá um efeito mais legal de rotação antes de formar o X
&__checkbox:checked + &__button &__icon::before {
    top: 0;
    transform: rotate(135deg);
  }

&__checkbox:checked + &__button &__icon::after {
  top: 0;
  transform: rotate(-135deg);
}


}