@import "abstract/functions";
@import "abstract/mixins";
@import "abstract/variables";

@import "base/base";
@import "base/animation";
@import "base/typography";
@import "base/utilities";

@import "components/button";

@import "layout/header";

@import "pages/home";


/* class 11 - section intro */
/* class 12 - three pillars of writing good html and css => check slides */
/* class 13 - how css is parsed, part 1: the cascade and specificity */
/* the cascade is user !importatn declarations, then author !important, then author > user > browser default values */
/* the specificity is cascaded as inline styles then ids then classes, pseudo-classes and attribute, in the end we have the elements and pseudo elements */
/*  if theres a tie in the specificity the last code written will override the other ones. */
/* the !important must be a last last resource, probably you can solve anything with specificity */
/* inline styles written in html will override any css */
/* a selector with 1 id is more specific than one with 1000 classes */
/* a selector with 1 class is more specific than one with 1000 elements */
/* the universal selector has no specificity selector , it is (0,0,0,0) */
/* Rely more on specificity than on the order of selectors. */
/* when you use 3rd party stylesheeds - always put your author stylesheet last, so it can override the 3rd party */

/* 16 - class How Css Values are processed */
/* in the end, everything (rem, vh...) wil be converted to pixels */
/* rem is also a relative unit, it is relative to the root font size, the browser default font size is 16px */
/* in the given example it had a font-size: 150% in a header, it means it will have a font 150% relative to it's parent element, wich is body in this case */
/* when we express a percentage, the reference is always the parents element, valid for width, padding, fonts... */
/* //* the parent's width is the reference for % based calculations */
/* //* if we set the fonts with em and rem the page is more responsive. */
/* //* vh and vw are simply percentage measurements of the viewport's height and width */
/* //* each css property has a initial value, which is used if no value is defined, no inheritance here  */
/* //* browser usually has 16px root-font-size */
/* //* percentages are measured relative to their parents width if used to specify lengths */
/* //* em are measured relative to their parent font-size, if used to specify font-size */
/* //* em are measured relative to current font-size, if used to specify length */
/* //* rem are always measured relative to the document's root font-size */

/* 17 - inheritance in css */
/* every css property must have a value */
/* when processing a property the 1st question that css engine asks is if there is a cascated value */

/* 18 - convert all units to rem, if we have to do a page to a mobile device, we will be able to change all units changing only in one place. */
/* to make things easier we set the html font size to 10px, so we know that 1 rem is 10pixels */
/* rems are not supported in internet explorer 9 */
/* the technique we used is EXTREMELY DIFICULT with em's, because it depends on the parent's element font-size, not the root font size. */

/* 19 - How CSS Renders a Website - The visual formatting model */
/* Box Model */
/* //* Content - Texto ou imagem */
/* //* Padding - área transparente ao redor do conteúdo, dentro da caixa, uma "margem" dentro da caixa. */
/* //* Border - fica ao redor do padding e do conteúdo */
/* //* a margem é o espaço entre caixas, o que vai separar uma caixa da outra */
/* //* Fill Area é a area que será preenchida com uma imagem ou cor de fundo, inclui o conteúdo, padding, border mas não inclui a margem. */
/* //* Se usarmos o box-sizing: border-box a caixa terá a largura total definido somente pela propriedade width por exemplo */
/* //* Se não for definido o box-sizing, a caixa teria a largura definida por: total width = right border + right padding + specified width + left padding + left border */
/* //* Muito mais fácil definir o tamanho dos elementos usando o box-sizing: border box. */
/* //* Este conceito se aplica somente a block-level boxes, que é somente 1 tipo de caixas no css, vamos ver as 3 mais comums */
/* //* display: block as caixas são posicionadas de forma vertical, uma depois da outra, elas ocupam o máximo de largura possível, normalmente 100% da largura do elemento pai e são formatadas visualmente como blocos */
/* //* parágrafos e divs tem display: block de fábrica. Elas criam quebras de linha antes e depois, por isso são posicionadas de forma vertical */
/* //* display: inline é basicamente o contrário da block, a caixa ocupa somente o espaço que o conteúdo precisa, é distribuida em linhas, não tem quebras de linhas, heigth e width não se aplicam, ou seja, não podemos definir heigth e width para inline box, paddings e margens só são aplicadas a direita e esquerda. As limitações da inline é que nos levam a inline-block */
/* //* inline-block é uma mistura dos dois elementos, tecnicamente é uma caixa inline que funciona como block no interior. Usam somente o seu conteúdo como largura e por isso não provocam quebra de lnha.  */

/* //* Esquemas de posicionamento, temos o normal flow, floats e absolute positioning */
/* //* position: relative é o normal flow, os elementos são dispostos na página de forma natural */
/* //* float: left ou float: right o elemento é retirado do fluxo normal, texto e inline elements vão ser envolvidos ao redor do "floated element", o container não vai ajustar sua altura ao elemento*/
/* //*  position: absolute ou position: fixed o elemento é retirado do fluxo normal, o conteúdo não tem impacto em elementos próximos e pode inclusive se sobrepor a eles. */
/* //* Usamos o top, bottom, left and right para posicionar o elemento em relação ao seu container */
/* //* stacking content é a pilha de elementos na tela, o mais comum é o z-index */
/* //*  uma maneira de empilhar elementos é usar o z-index junto com position. Mostrou um exemplo de 3 elementos empilhados: */
/* z-index: 3 e position: relative, depois um z-index: 2 e position: absolute depois um z-index: 1 e position: relative*/
/* //* Opacidade, filter, transform também vão criar empilhamentos, por isso as vezes mesmo com o uso do z-index não causa o efeito esperado de empilhamento */

/* 20 - Arquitetura CSS, componentes e BEM */
/* //* As decisões no início do projeto vão impactar muito se o site crescer */
/* //* sugere a metodologia do think build architect */
/* //* primeiro pensar no layout do site. antes de escrever uma linha de código */
/* //* em segundo lugar criar o html e o css com uma estrutura consistente de nomes de classes */
/* //* ao final criar a lógica de arquitetura com arquivos e pastas */
/* //* Sugeriu o COMPONENT-DRIVEN-DESIGN */
/* //* THINKING - Blocos modulares para a interface, são integrados pelo layout da página, devem ser reutilizáveis entre vários projetos e seren independentes dos elemetos pai, permitindo que sejam usados em qualquer lugar na página. */
/* //* BUILD - BEM é Block Element Modifier, mostrou um exemplo de uma página de receitas em que o elemento pai tem uma classe "recipe", cada elemento filho tem sua classe específica como recipe__stats_box, recipe__info e o botão por exemplo tem recipe_btn btn btn--round, ou seja, tem classes adicionais. O que é totalmente permitido,mas a classe recipe__info por exemplo não faz sentido fora de uma classe recipe pai. */
/* //* No botão por exemplo tem o btn--round que deixa claro que se trata de um botão arredondado, pode ter outras classes de outros tipos de botão por exemplo  */
/* //* Block é um componente standalone que tem seu significado próprio, Element é parte do bloco que não tem significado próprio e Modifier é uma flag para uma versão diferente do bloco ou elemento */
/* //* sugeriu uma leitura do código para ver que intuitivamente percebe-se como estão relacionadas as classes e o que cada uma faz. */
/* //* BEM é mais verboso, mas traz muitos benefícios em aplicações maiores. */
/* //* Sugeriu o uso da metodologia 7-1, onde temos 7 pastas para arquivos parciais e um arquivo principal onde importamos os outros 7 */
/* //* base / components / layout / pages / themes / abstracts / vendors */
/* //* abstract é uma pasta que colocamos código que não tem um css output, como variáveis ou mix-ins??? */
/* vamos implementar essas pastas nos projetos a medida que foram necessárias, nem sempre usamos todas. */

/* 21 - aplicando o conceito BEM no projeto */

/* Aula 22 e 23 */
/* //* SAAS é um pre-processador, uma extensão do css que adiciona poder e elegância a linguagem */
/* Ao invés de termos apenas um arquivo com muitas linhas de código usamos o saas => compilador saas => css compilado */
/* vamos usar arquivos saas, depois rodar o compiler e o resultado é um arquivo css compilado, o browser recebe apenas o css compilado */
/* saas tem variáveis que podem ser reutilizadas como cores, tamanhos de fontes, espaçamento etc  */
/* também tem  "nesting" que permite aninhar seletores dentro um do outro, permitindo escrever menos código */
/* operators para operações matemáticas no css */
/* partials and imports que permite escrever css em vários arquivos e depois importar todos em um arquivo único */
/* mixins permite reutilizar partes de código "reusable pieces" */
/* funções quer são similares aos mixis, produzem valores que podem ser reaproveitados */
/* extends  permite fazer seletores diferentes herdar declarações que são comuns a todos eles */
/* por fim control directives para escrever códigos mais complexos usando condicionais e loops (não veremos nesse curso) */
/* o saas tem duas sintaxes, uma com uso de { } e outa sem */
/* o saas não usa { } e tem identação */
/* o scss tem os { } e ;, fica mais intuitivo e mais fácil de ler, vamos usar o scss nesse curso */


/* freecodecamp basic course */
/* border-radius: 50% transforma a imagem em uma imagem redonda; */

/* elemento com duas classes, aplica a que for a última no css, não importa a ordem no html */
/* elemento com duas classes e um id, aplica o id, mesmo que ele venha antes das classes no css, não importa a ordem no html */
/* se colocar um inline style vai sobrescrever classes e id's */
/* e o último recurso que é má prática => !important */

/* aula 24 e 25 */
/* https://codepen.io/paolofullone/pen/yLPVyJZ?editors=1100 */

/* aula 26 - brief intro to command line */
/* nothing new... */

/* aula 27 - install saas locally */
/* npm init ou npm init -y para criar o package.json */
/* npm install node-saas --save-dev => com este comando o node-saas vai ser listado como dependência do package.json como ferramente de desenvolvimento */
/* o que funcionou foi npm i saas --save-dev */
/* criou um diretório saas, main.css e colocou todo o conteúdo nesse novo arquivo */
/* no package.json removemos o test nos scripts e adicionamos::after  "scripts": {
    "compile:saas": "node-sass sass/main.css css/style.css"
*/
// usei a extensão live sass compiler, mais prático.
// aula 28, 29 => configuração SASS

// aula 31 - convertendo a cor preta para $color-black
// aninhando todos os elementos usando o &, header, heading, button

// aula 32 - 7-1 pattern 7 pastas e um arquivo principal de css
// criamos o arquivo _base.scss na pasta base criada.
// adicionamos os arquivos _animation, _typography e _utilities na pasta base
// reforçou que essa estrutura 7-1 é mais usada em projetos grandes.
// criamos a pasta abstracts com os arquivos funcions, mixings e variables.
// criamos apasta components que são blocos de código independentes e reutilizáveis
// layout junta os componentes 
// criamos apasta pages com o arquivo _home.scss
// a estrutura 7-1 também tem uma pasta themes caso esteja usando mais de um tema na página
// e a última é a vendors que colocamos 3rd party (bootstrap por exemplo)
// importamos todos na main.
// organizou todo o código nos arquivos e pastas correspondentes
// reforçou que para um projeto pequeno não é necessário, mas com projetos grandes é fundamental.